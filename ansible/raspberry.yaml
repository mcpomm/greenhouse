- hosts: greenhouse
  remote_user: "{{ user }}"
  become: yes
  vars:
    src_dir: "{{ playbook_dir }}"
  vars_files:
    - "{{ src_dir }}/config/raspberry-config.yml"
  tasks:
    ###################################################################
    # General
    ###################################################################
    - name: Letting iptables see bridged traffic
      modprobe:
        name: br_netfilter

    - name: Make sure that the br_netfilter module is loaded
      shell: lsmod | grep br_netfilter
      ignore_errors: yes
      register: command_output

    - name: Print br_netfilter activation
      debug:
        msg: "{{command_output.stdout.split('\n')}}"
    ###################################################################
    # Docker
    ###################################################################
    - name: Install Docker and containerd
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - docker.io
          - containerd

    - name: "Create docker dir"
      file:
        path: /etc/docker
        state: directory

    - name: Write Docker daemon configuration
      copy:
        dest: "/etc/docker/daemon.json"
        content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }

    - name: Enable service docker
      systemd:
        name: docker
        enabled: yes

    - name: Reload daemon
      systemd:
        daemon_reload: yes

    - name: Restart Docker
      systemd:
        state: restarted
        daemon_reload: yes
        name: docker

    - name: Add {{ user }} user to docker group
      user:
        name: "{{ user }}"
        group: docker

    ###################################################################
    # Kubernetes
    ###################################################################
    - name: Add an apt signing key for Kubernetes
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Adding apt repository for Kubernetes
      apt_repository:
        repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: kubernetes.list

    - name: Install Kubernetes binaries
      apt:
        name: "{{ packages }}"
        state: present
        update_cache: yes
      vars:
        packages:
          - kubelet
          - kubeadm
          - kubectl

    - name: Setup Linux Control Groups
      lineinfile:
        path: /boot/firmware/cmdline.txt
        regexp: "net.ifnames=0 dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=LABEL=writable rootfstype=ext4 elevator=deadline rootwait fixrtc"
        line: net.ifnames=0 dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=LABEL=writable rootfstype=ext4 elevator=deadline rootwait fixrtc cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory
        state: present

    - name: Reboot host and wait for it to restart
      reboot:
        msg: "Reboot initiated by Ansible"
        connect_timeout: 5
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: whoami

    - name: Initialize the cluster
      shell: kubeadm init

    - name: Create .kube directory
      become: yes
      become_user: ubuntu
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: Check if admin.conf file exists.
      stat:
        path: /etc/kubernetes/admin.conf
      register: k8s_conf

    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: ubuntu
      when: k8s_conf.stat.exists

    - name: Reset ssh connection to allow user changes to affect 'current login user'
      meta: reset_connection

    - name: Apply CNI plugin
      become: yes
      become_user: ubuntu
      shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
